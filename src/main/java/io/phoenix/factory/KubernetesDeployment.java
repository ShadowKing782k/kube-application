package io.phoenix.factory;

import io.fabric8.kubernetes.api.model.*;
import io.fabric8.kubernetes.api.model.apps.Deployment;
import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;
import io.fabric8.kubernetes.api.model.apps.DeploymentStrategyBuilder;
import io.fabric8.kubernetes.api.model.apps.RollingUpdateDeploymentBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.phoenix.KubeApplication;
import io.phoenix.KubeApplicationReconciler;
import org.jboss.logging.Logger;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static io.phoenix.util.KubeUtil.*;

public class KubernetesDeployment implements KubernetesResource {
    private static final Logger log = Logger.getLogger(KubernetesDeployment.class);

    private static final int DEPLOYMENT_READY_TIMEOUT_MS = 30000;
    private static final long DEFAULT_TERMINATION_GRACE_PERIOD = 30L;

    private final KubernetesClient client;
    private final Deployment deployConfig;
    private final KubeApplication resource;

    public KubernetesDeployment(KubeApplication resource, KubernetesClient client) {
        this.client = client;
        this.deployConfig = resource.getSpec().getDeploymentConfig();
        this.resource = resource;
    }

    private Deployment removeGeneratedFields(Deployment deployment) {
        nullifyMetadataFields(deployment.getMetadata());
        removeAutoGeneratedAnnotations(deployment.getMetadata().getAnnotations(),
                "kubectl.kubernetes.io/last-applied-configuration",
                "deployment.kubernetes.io/revision");
        deployment.setStatus(null); // Remove status as it's dynamically generated

        var podTemplate = deployment.getSpec().getTemplate();
        nullifyMetadataFields(podTemplate.getMetadata());
        removeAutoGeneratedAnnotations(podTemplate.getMetadata().getAnnotations(),
                "kubectl.kubernetes.io/restartedAt",
                "kubectl.kubernetes.io/last-applied-configuration");

        return deployment;
    }

    private void nullifyMetadataFields(ObjectMeta metadata) {
        metadata.setManagedFields(new ArrayList<>());
        metadata.setCreationTimestamp(null);
        metadata.setUid(null);
        metadata.setDeletionTimestamp(null);
        metadata.setResourceVersion(null);
        metadata.setSelfLink(null);
        metadata.setGeneration(null);
    }

    private void removeAutoGeneratedAnnotations(Map<String, String> annotations, String... keys) {
        if (annotations != null) {
            for (String key : keys) {
                annotations.remove(key);
            }
        }
    }

    private Deployment populateDefaultFields(Deployment deployment) {
        var spec = deployment.getSpec();

        spec.setReplicas(defaultIfNull(spec.getReplicas(), 1));
        spec.setRevisionHistoryLimit(defaultIfNull(spec.getRevisionHistoryLimit(), 10));
        spec.setProgressDeadlineSeconds(defaultIfNull(spec.getProgressDeadlineSeconds(), 600));
        if (spec.getStrategy() == null) {
            spec.setStrategy(new DeploymentStrategyBuilder().withType("RollingUpdate").build());
        }
        if (spec.getStrategy().getRollingUpdate() == null) {
            spec.getStrategy().setRollingUpdate(new RollingUpdateDeploymentBuilder()
                    .withMaxSurge(new IntOrString("25%"))
                    .withMaxUnavailable(new IntOrString("25%"))
                    .build());
        }

        var podTemplate = spec.getTemplate();
        var podSpec = podTemplate.getSpec();

        podSpec.setRestartPolicy(defaultIfNull(podSpec.getRestartPolicy(), "Always"));
        podSpec.setSchedulerName(defaultIfNull(podSpec.getSchedulerName(), "default-scheduler"));
        podSpec.setTerminationGracePeriodSeconds(defaultIfNull(podSpec.getTerminationGracePeriodSeconds(), DEFAULT_TERMINATION_GRACE_PERIOD));
        podSpec.setDnsPolicy(defaultIfNull(podSpec.getDnsPolicy(), "ClusterFirst"));
        podSpec.setNodeSelector(defaultIfNull(podSpec.getNodeSelector(), new HashMap<>()));
        podSpec.setSecurityContext(defaultIfNull(podSpec.getSecurityContext(), new PodSecurityContext()));

        for (Container container : podSpec.getContainers()) {
            setDefaultContainerValues(container);
        }

        return deployment;
    }

    private void setDefaultContainerValues(Container container) {
        container.setImagePullPolicy(defaultIfNull(container.getImagePullPolicy(), "Always"));
        container.setTerminationMessagePolicy(defaultIfNull(container.getTerminationMessagePolicy(), "File"));
        container.setTerminationMessagePath(defaultIfNull(container.getTerminationMessagePath(), "/dev/termination-log"));
        if (container.getResources() == null) {
            container.setResources(new ResourceRequirements());
        }
    }

    private <T> T defaultIfNull(T value, T defaultValue) {
        return value == null ? defaultValue : value;
    }

    private boolean isDesiredStateEqual(Deployment deploymentManifest) {
        var existingDeployment = this.client.apps()
                .deployments()
                .inNamespace(deployConfig.getMetadata().getNamespace())
                .withName(deployConfig.getMetadata().getName())
                .get();

        if(existingDeployment == null){
            return false;
        }

        var finalExistingDeployment = removeGeneratedFields(existingDeployment);
        var finalNewDeployment = populateDefaultFields(deploymentManifest);

        return finalExistingDeployment.equals(finalNewDeployment);
    }

    @Override
    public boolean apply() {
        var deploymentManifest = new DeploymentBuilder()
                .withSpec(deployConfig.getSpec())
                .withMetadata(updateMetadata(deployConfig.getMetadata(), this.resource))
                .build();

        //set owner reference

        deploymentManifest.getMetadata().setOwnerReferences((getOwnerRef(resource)));

        log.infof("Checking desired state for deployment: %s in namespace: %s",
                deploymentManifest.getMetadata().getName(),
                deploymentManifest.getMetadata().getNamespace());

        if (!isDesiredStateEqual(deploymentManifest)) {
            log.infof("Deployment state differs for %s. Updating...", deploymentManifest.getMetadata().getName());
            var deploymentResource = client.apps().deployments().resource(deploymentManifest);
            deploymentResource.forceConflicts().serverSideApply();
            return waitForReadiness(deploymentResource::isReady,
                    "Deployment creation in progress",
                    resource,
                    client,
                    DEPLOYMENT_READY_TIMEOUT_MS);
        }

        log.infof("Deployment state matches for %s; no changes needed.", deploymentManifest.getMetadata().getName());
        return true;
    }
}
