package io.phoenix.factory;

import io.fabric8.kubernetes.api.model.ObjectMeta;
import io.fabric8.kubernetes.api.model.autoscaling.v2.HorizontalPodAutoscaler;
import io.fabric8.kubernetes.api.model.autoscaling.v2.HorizontalPodAutoscalerBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.phoenix.KubeApplication;
import org.jboss.logging.Logger;

import java.util.ArrayList;
import java.util.Map;

import static io.phoenix.util.KubeUtil.*;

public class KubernetesHPA implements KubernetesResource {
    private static final Logger log = Logger.getLogger(KubernetesDeployment.class);
    private final KubernetesClient client;
    private final HorizontalPodAutoscaler hpaConfig;
    private final KubeApplication resource;

    public KubernetesHPA(KubeApplication resource, KubernetesClient client) {
        this.client = client;
        this.hpaConfig = resource.getSpec().getHpaConfig();
        this.resource = resource;
    }

    private void nullifyMetadataFields(ObjectMeta metadata) {
        if (metadata != null) {
            metadata.setManagedFields(new ArrayList<>());
            metadata.setCreationTimestamp(null);
            metadata.setUid(null);
            metadata.setDeletionTimestamp(null);
            metadata.setResourceVersion(null);
            metadata.setSelfLink(null);
            metadata.setGeneration(null);
        }
    }

    private void removeAutoGeneratedAnnotations(Map<String, String> annotations, String... keys) {
        if (annotations != null) {
            for (String key : keys) {
                annotations.remove(key);
            }
        }
    }

    private HorizontalPodAutoscaler removeGeneratedFields(HorizontalPodAutoscaler hpa) {
        if (hpa != null) {
            nullifyMetadataFields(hpa.getMetadata());
            removeAutoGeneratedAnnotations(hpa.getMetadata().getAnnotations(),
                    "kubectl.kubernetes.io/last-applied-configuration");
            hpa.setStatus(null); // Status is dynamically generated
        }
        return hpa;
    }

    private HorizontalPodAutoscaler populateDefaultFields(HorizontalPodAutoscaler hpa) {
        if (hpa != null && hpa.getSpec() != null) {
            // Set default minReplicas to 1 if not specified
            if (hpa.getSpec().getMinReplicas() == null) {
                hpa.getSpec().setMinReplicas(1);
            }
            // Ensure maxReplicas is set
            if (hpa.getSpec().getMaxReplicas() <= 0) {
                hpa.getSpec().setMaxReplicas(10); // Default to 10 replicas
            }
        }
        return hpa;
    }

    private boolean isDesiredStateEqual(HorizontalPodAutoscaler hpaManifest) {
        var existingHPA = client.autoscaling().v2()
                .horizontalPodAutoscalers()
                .inNamespace(hpaManifest.getMetadata().getNamespace())
                .withName(hpaManifest.getMetadata().getName())
                .get();

        if (existingHPA == null) {
            return false; // No existing HPA means the states differ
        }

        var finalExistingHPA = removeGeneratedFields(existingHPA);
        var finalNewHPA = populateDefaultFields(hpaManifest);
        return finalExistingHPA.equals(finalNewHPA);
    }

    @Override
    public boolean apply() {
        // Apply logic for HPA
        var hpaManifest = new HorizontalPodAutoscalerBuilder()
                .withSpec(hpaConfig.getSpec())
                .withMetadata(updateMetadata(hpaConfig.getMetadata(), this.resource))
                .build();

        hpaManifest.getMetadata().setOwnerReferences((getOwnerRef(resource)));
        log.infof("Checking desired state for deployment: %s in namespace: %s",
                hpaManifest.getMetadata().getName(),
                hpaManifest.getMetadata().getNamespace());

        if (!isDesiredStateEqual(hpaManifest)) {
            var hpa = client.autoscaling().v2().horizontalPodAutoscalers().resource(hpaManifest);
            log.infof("Service state differs for %s. Updating...", hpaManifest.getMetadata().getName());
            hpa.forceConflicts().serverSideApply();
            return waitForReadiness(hpa::isReady, "HPA creation is in progress", resource, client, 20000);
        }
        log.infof("Service state matches for %s; no changes needed.", hpaManifest.getMetadata().getName());
        return true; // Desired state already matches
    }
}
